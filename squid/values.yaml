# Default values for squid.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Environment selector (default to release, override with --set environment=dev for development)
environment: release

# Environment-specific settings
envSettings:
  dev:
    squid:
      image:
        repository: localhost/konflux-ci/squid
        tag: "latest"
    test:
      image:
        repository: localhost/konflux-ci/squid-test
        tag: "latest"
  release:
    squid:
      image:
        repository: quay.io/konflux-ci/caching/squid
        tag: "latest"
    test:
      image:
        repository: quay.io/konflux-ci/caching/squid-test
        tag: "latest"

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Note: repository and tag are set dynamically by environment helpers in _helpers.tpl

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  fsGroup: 0

securityContext:
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 0

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 3128

# Squid Prometheus Exporter Configuration
# This enables monitoring of Squid metrics via Prometheus
# Note: squid-exporter is now integrated into the main squid image
# Note: squid port is referenced from service.port to avoid duplication
squidExporter:
  # Enable or disable the integrated squid-exporter
  enabled: true
  # Port on which the exporter will serve metrics
  port: 9301
  # Metrics path for Prometheus scraping
  metricsPath: "/metrics"
  # Optional authentication (leave empty if not needed)
  squidLogin: ""
  squidPassword: ""
  # Extract service times (increases metric detail)
  extractServiceTimes: "true"
  # Custom labels to add to metrics
  customLabels: {}
  # Resource limits and requests for the exporter
  resources:
    requests:
      cpu: 10m
      memory: 16Mi
    limits:
      cpu: 100m
      memory: 64Mi
  # Probe configurations for squid-exporter sidecar
  livenessProbe:
    httpGet:
      path: "/metrics" # Will use squidExporter.metricsPath in template
      port: metrics
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 30
  readinessProbe:
    httpGet:
      path: "/metrics" # Will use squidExporter.metricsPath in template
      port: metrics
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# TCP probes are used for the squid container as they are more appropriate for proxy services
livenessProbe:
  tcpSocket:
    port: http
  enabled: true

readinessProbe:
  tcpSocket:
    port: http
  enabled: true

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# IMPORTANT: This chart creates and manages its own namespace via templates/namespace.yaml
# DO NOT use `helm install --namespace` or `helm upgrade --namespace` with this chart
# All resources will be deployed to the namespace specified below
namespace:
  name: proxy
  annotations: {}

# Cert-manager and Trust-manager installation control
# Set to true to install cert-manager and trust-manager components
installCertManagerComponents: true
installTrustManagerComponents: true

# Cert-manager and Trust-manager configuration

# Cert-manager configuration
# Based on https://cert-manager.io/docs/installation/helm/
cert-manager:
  enabled: true # Set to true to enable cert-manager
  namespace: "cert-manager" # Deploy to dedicated namespace
  installCRDs: false # Install cert-manager Custom Resource Definitions
  global:
    leaderElection:
      namespace: "cert-manager" # Namespace for leader election
    podSecurityPolicy:
      enabled: false # Disable Pod Security Policy
    rbac:
      create: true # Create RBAC resources
    serviceAccount:
      create: true # Create service accounts
      name: ""
      annotations: {}
      automountServiceAccountToken: true
  replicaCount: 1
  image:
    repository: quay.io/jetstack/cert-manager-controller
    tag: v1.18.2
    pullPolicy: IfNotPresent
  webhook:
    replicaCount: 1
    image:
      repository: quay.io/jetstack/cert-manager-webhook
      tag: v1.18.2
      pullPolicy: IfNotPresent
  cainjector:
    enabled: true # Enable the CA injector component
    replicaCount: 1
    image:
      repository: quay.io/jetstack/cert-manager-cainjector
      tag: v1.18.2
      pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Trust-manager configuration
trust-manager:
  crds:
    enabled: false
    keep: false
  namespace: "cert-manager"

# Issuer configuration
# Creates a self-signed issuer and bundle in the cert-manager namespace
selfsigned-bundle:
  enabled: true  # Set to true to create a self-signed issuer and bundle

# Prometheus monitoring configuration
prometheus:
  # Enable ServiceMonitor for Prometheus Operator
  serviceMonitor:
    enabled: true
    # Namespace where the ServiceMonitor should be created
    # If empty, it will be created in the same namespace as the application
    namespace: ""
    # Additional labels for the ServiceMonitor
    labels: {}
    # Scrape interval
    interval: 30s
    # Scrape timeout
    scrapeTimeout: 10s
    # Metrics path (should match squidExporter.metricsPath)
    path: "/metrics"
    # Additional annotations for the ServiceMonitor
    annotations: {}

test:
  enabled: true # Enable helm test functionality
  image:
    pullPolicy: IfNotPresent
    # Note: repository and tag are set dynamically by environment helpers in _helpers.tpl
  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi

# mirrord configuration for development and CI testing
# The mirrord target pod provides connection stealing capabilities for local development
mirrord:
  enabled: true # Enable mirrord target pod (disable in production)
  targetPod:
    name: "mirrord-test-target" # Name of the mirrord target pod
    image:
      pullPolicy: IfNotPresent
      # Note: repository and tag are set dynamically by squid.test.image helper in _helpers.tpl
    ports:
      http: 8080 # Standard HTTP port
      testServer: 9090 # Test server port for connection stealing
    env:
      testServerPort: 9090 # TEST_SERVER_PORT environment variable
    resources:
      requests:
        cpu: 50m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
  # NOTE: RBAC is shared with test infrastructure
  # When mirrord.enabled=true, test RBAC becomes persistent (no helm hooks)
  # When mirrord.enabled=false, test RBAC uses hooks for cleanup

# SSL Database configuration
# Persistent storage for SSL certificates
sslDb:
  storage:
    size: 1Gi  # Size of the PVC for SSL database
    storageClass: ""  # Storage class to use (empty for default)

# Cache configuration
cache:
  # Defines a list of URL patterns to cache. All other URLs are not cached.
  # An empty list disables this feature, meaning all URL patterns are cached.
  allowList: []

# TLS outgoing options
tlsOutgoingOptions:
  # CA file for outgoing TLS connections
  caFile: ""
